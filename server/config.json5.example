{
    // Flags currently played games with 'isTournament'
    tournamentMode: false,
    // Database settings.
    database: {
        // (Boolean) If the database is enabled.
        enabled: false,
        protocol: 'neo4j',
        host: 'neo4j',
        port: 7687,
        username: 'neo4j',
        password: 'password',
        database: 'neo4j',
        defaultAdminToken: 'admin',
        aiPlatformSecretKey: 'example',
        aiPlatformSalt: 'example',
    },
    // Game-specific settings.
    // A game's ID corresponds to it's key in this object.
    games: {
        'love-letter': {
            path: 'love-letter/love-letter.js',
            settings: {
                maxPlayers: 4,
                minPlayers: 2,
                autoLogging: true,
                loggingEnabled: true,
                bot: 'bot',
            }
        },
        'paper-scissors-rock': {
            path: 'paper-scissors-rock/paper-scissors-rock.js',
            settings: {
                maxPlayers: 2,
                minPlayers: 2,
                autoLogging: true,
                loggingEnabled: true,
                bot: 'bot',
            }
        },
        /* Template:
        <Game Name Here>: {
            // The file which exports a game implementing IGame.
            // This is relative to the game directory.
            path: <Path>,                                   REQUIRED
            // Settings related to the game.
            settings: {                                     REQUIRED
                // Maximum players per game.
                maxPlayers: <Number>,                       REQUIRED
                // Minimum players per game.
                minPlayers: <Number>,                       REQUIRED
                // If the automatic method/argument based logging should be used.
                autoLogging: <Boolean>,                     REQUIRED
                // If logging is enabled for this game. 
                loggingEnabled: <Boolean>,                  REQUIRED
                // The agent to use as a bot.
                // 'bot' uses the class defined in <Game>.BOT
                // 'smart-bot' uses the class defined in <Game>.SMARTBOT
                bot: <'bot' (DEFAULT)|'smart-bot'>,
            }
        }
        */
    }
}